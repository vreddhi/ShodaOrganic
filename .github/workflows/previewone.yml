name: Deploy to ECS Previewone Cluster

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'dev'  # Default branch if not specified

env:
  AWS_REGION: us-east-1                                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: previewone/frontend                    # set this to your Amazon ECR repository name
  ECS_SERVICE: frontend_ECS_Service_previewone                  # set this to your Amazon ECS service name
  ECS_CLUSTER: frontend_ECSCluster_previewone                    # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/previewone-task-definition.json          # set this to the path to your Amazon ECS task definition
                                                          # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: webandreader                                # set this to the name of the container in the
                                                          # containerDefinitions section of your task definition


permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: previewone
    steps:
    - name: Checkout Frontend code
      uses: actions/checkout@v4
      with:
        repository: DSTRLY/WebsiteFrontend
        token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
        ref: ${{ github.event.inputs.WebsiteFrontend_branch }}

    - name: Checkout Reader Code
      uses: actions/checkout@v4
      with:
        repository: DSTRLY/Reader
        token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
        ref: ${{ github.event.inputs.Reader_branch }}
        path: ./src/modules/reader

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::297154241556:role/GithubDeploy
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}  
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        KLAVIO_PRIVATE_KEY: ${{ secrets.KLAVIO_PRIVATE_KEY }}
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        NEXT_PUBLIC_ENABLE_DEBUG_MODE: ${{ secrets.NEXT_PUBLIC_ENABLE_DEBUG_MODE }}
        NEXT_PUBLIC_DEBUG_ALLOWED_EMAIL_DOMAINS: ${{ secrets.NEXT_PUBLIC_DEBUG_ALLOWED_EMAIL_DOMAINS }}
        NEXT_PUBLIC_MINIORANGE_APP_ID: ${{ secrets.NEXT_PUBLIC_MINIORANGE_APP_ID }}
        NEXT_PUBLIC_MINIORANGE_APP_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_MINIORANGE_APP_CLIENT_ID }}
        NEXT_PUBLIC_MINIORANGE_URL: ${{ secrets.NEXT_PUBLIC_MINIORANGE_URL }}
        NEXT_PUBLIC_MINIORANGE_SUCCESS_LOGIN_REDIRECT_URL: ${{ secrets.NEXT_PUBLIC_MINIORANGE_SUCCESS_LOGIN_REDIRECT_URL }}
      run: |
          docker build -t webandreader --build-arg NEXT_PUBLIC_API_URL=${{ env.NEXT_PUBLIC_API_URL }} \
                --build-arg KLAVIO_PRIVATE_KEY=${{ env.KLAVIO_PRIVATE_KEY }} \
                --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }} \
                --build-arg STRIPE_SECRET_KEY=${{ env.STRIPE_SECRET_KEY }} \
                --build-arg NEXT_PUBLIC_ENABLE_DEBUG_MODE=${{ env.NEXT_PUBLIC_ENABLE_DEBUG_MODE }} \
                --build-arg NEXT_PUBLIC_DEBUG_ALLOWED_EMAIL_DOMAINS=${{ env.NEXT_PUBLIC_DEBUG_ALLOWED_EMAIL_DOMAINS }} \
                --build-arg NEXT_PUBLIC_MINIORANGE_APP_ID=${{ env.NEXT_PUBLIC_MINIORANGE_APP_ID }} \
                --build-arg NEXT_PUBLIC_MINIORANGE_APP_CLIENT_ID=${{ env.NEXT_PUBLIC_MINIORANGE_APP_CLIENT_ID }} \
                --build-arg NEXT_PUBLIC_MINIORANGE_URL=${{ env.NEXT_PUBLIC_MINIORANGE_URL }} \
                --build-arg NEXT_PUBLIC_MINIORANGE_SUCCESS_LOGIN_REDIRECT_URL=${{ env.NEXT_PUBLIC_MINIORANGE_SUCCESS_LOGIN_REDIRECT_URL }} \
                .
          docker tag webandreader:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag webandreader:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
        environment-variables: |
            KLAVIO_PRIVATE_KEY=${{ secrets.KLAVIO_PRIVATE_KEY }}
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}      
            NEXT_PUBLIC_ENABLE_DEBUG_MODE=${{ secrets.NEXT_PUBLIC_ENABLE_DEBUG_MODE }}
            NEXT_PUBLIC_DEBUG_ALLOWED_EMAIL_DOMAINS=${{ secrets.NEXT_PUBLIC_DEBUG_ALLOWED_EMAIL_DOMAINS }}  
            NEXT_PUBLIC_MINIORANGE_APP_ID=${{ secrets.NEXT_PUBLIC_MINIORANGE_APP_ID }}
            NEXT_PUBLIC_MINIORANGE_APP_CLIENT_ID=${{ secrets.NEXT_PUBLIC_MINIORANGE_APP_CLIENT_ID }}
            NEXT_PUBLIC_MINIORANGE_URL=${{ secrets.NEXT_PUBLIC_MINIORANGE_URL }}
            NEXT_PUBLIC_MINIORANGE_SUCCESS_LOGIN_REDIRECT_URL=${{ secrets.NEXT_PUBLIC_MINIORANGE_SUCCESS_LOGIN_REDIRECT_URL }}                       

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        force-new-deployment: true
